local camera = require "orthographic.camera"
local lib = require "modules.lib"

local function Fail (self)
	go.set_position(self.startPos)
	go.animate("/camera", "position", go.PLAYBACK_ONCE_FORWARD, self.camStartPos, go.EASING_OUTCUBIC, 1)
	go.set_position(self.borderStartPos, "/leftBorder")
	go.set_position(self.playerStartPos, "/player")
	self.speed = vmath.vector3(0, 0, 0)
	self.restart = true
	self.canTurnBullet = false
	go.set(".", "euler.y", 0)
	self.doubleJump = 0
	msg.post("#sprite", "play_animation", {id = hash("walk")})
end

function init(self)
	msg.post(".", "acquire_input_focus")

	go.property("speed", 5)
	self.speed = vmath.vector3(self.speed, 0, 0)
	self.startSpeed = self.speed
	-- Speed ---------------------------------------

	go.property("jump", 50)
	go.property("jumpDuration", 0.2)
	go.property("jumpFall", 2)
	go.property("jumpAir", 0.3)
	go.property("canJump", true)
	go.property("doubleJumpHigh", 50)
	self.canDown = true
	self.doubleJump = 0
	-- Jump ----------------------------------------

	self.canTurn = true
	self.scaleAnim = true
	self.deadCount = 0
	self.canTurnBullet = true
	self.firePos = go.get_position("leftBorder")
	self.changeAnim = false
	-- BugFix --------------------------------------

	msg.post("/go6#sprite", "disable")
	msg.post("/go6#sprite1", "disable")
	-- Fire ----------------------------------------

	self.rotation = 0
	-- Rotation ------------------------------------

	self.startPos = go.get_position()
	self.camStartPos = go.get_position("/camera")
	self.borderStartPos = go.get_position("/leftBorder")
	self.playerStartPos = go.get_position("/player")
	-- End -----------------------------------------

	go.set("/final#sprite", "tint.w", 0)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.pos = go.get_position()
	if not self.canJump then
		go.set_position(self.pos + vmath.vector3(0, -self.jump * dt * self.jumpFall, 0) + self.speed)
	else
		go.set_position(self.pos + self.speed)
	end
	if self.canDown then
		self.canJump = false
	end
	-- Move -----------------------------------------

	self.correction = vmath.vector3() -- Collision
	-- Collision ------------------------------------

	self.firePos = go.get_position("leftBorder")

	if self.pos.x < self.firePos.x then
		Fail(self)
		sound.play("/step1#sound1")
	end
	-- Fire Wall BugFix -----------------------------
end

function on_message(self, message_id, message, sender)
	if message_id == lib.hashed ("collision_response") then
		if	message.other_group == lib.hashed("wall") and self.canTurn and self.canTurnBullet then
			if self.pos.y - (go.get_position(message.other_id).y * 2) > 0 then
				self.rotation = (self.rotation + 180) % 360
				sound.play("/step1#sound")
				go.set(".", "euler.y", self.rotation)
				self.speed = self.speed * -1
				self.canTurn = false
				timer.delay(0.2, false, function () self.canTurn = true end)
			end
		-- Wall Collision ---------------------------------------------------------------------

			if message.other_id == lib.hashed("/leftBorder") then
				self.deadCount = self.deadCount + 1
				msg.post("/go6#sprite", "enable")
				msg.post("/go6#sprite1", "enable")
				particlefx.play("/go6#fire")
				particlefx.play("/go6#fire1")
				timer.delay(2, false, function ()
					self.deadCount = 0
					msg.post("/go6#sprite", "disable")
					msg.post("/go6#sprite1", "disable")
					particlefx.stop("go6#fire")
					particlefx.stop("go6#fire1")

				end)
				if self.deadCount == 2 then
					Fail(self)
					sound.play("/step1#sound1")
					-- Flame Wall --------------------------------------------------------------
				end
			end
		elseif  (message.other_group ~= lib.hashed("step") or go.get(msg.url(nil, message.other_id, "step"), "activated")) then
			self.canJump = true
			self.doubleJump = 0
			if self.changeAnim then
				self.changeAnim = false
				msg.post("#sprite", "play_animation", {id = hash("walk")})
			end
		end

	elseif message_id == lib.hashed ("jump") then
		if self.doubleJump < 2 then
			self.doubleJump = self.doubleJump + 1
			go.cancel_animations(".", "position.y")

			self.canDown = false

			sound.play("#sound")
			go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, self.pos.y + self.jump + ((self.doubleJump - 1) * self.doubleJumpHigh), go.EASING_OUTCUBIC, self.jumpDuration, 0,
			function () if not self.canDown then self.canDown = true end end)
			msg.post("#sprite", "play_animation", {id = hash("jump")})
			self.changeAnim = true

			if self.scaleAnim then
				self.scaleAnim = false
				go.animate(".", "scale.y", go.PLAYBACK_ONCE_PINGPONG, 0.25, go.EASING_OUTCUBIC, 0.2, 0, function () self.scaleAnim = true end)
			end
			-- Jump --------------------------------------------------------------------------
		end

	elseif message_id == lib.hashed ("turn") and self.canTurnBullet then
			self.speed = self.speed * -1
			self.rotation = (self.rotation + 180) % 360
			go.set(".", "euler.y", self.rotation)
			sound.play("/step1#sound")
		-- Turn -------------------------------------------------------------------------------

	elseif message_id == lib.hashed ("contact_point_response") then
		if (message.other_group ~= lib.hashed("step") or go.get(msg.url(nil, message.other_id, "step"), "activated")) and message.other_group ~= lib.hashed("wall") then
			if message.distance > 0 then
				local proj = vmath.project(self.correction, message.normal * message.distance)
				if proj < 1 then
					

					local comp = (message.distance - message.distance * proj) * message.normal
					go.set_position(go.get_position() + comp)
					self.correction = self.correction + comp
					-- Don't go inside walls ----------------------------------------------------------------
				end
			end
		end
	elseif message_id == lib.hashed ("trigger_response") and message.enter  then
		if message.other_group == lib.hashed("pipe") then
			msg.post("#collisionobject", "disable")

			self.canDown = false
			self.canjump = true
			self.speed = vmath.vector3(0, 0, 0)
			sound.play("/pipe#sound")

			local otherPos = go.get_position(message.other_id)
			local newPos = vmath.vector3(otherPos.x, 10 + self.pos.y, 0)
			go.set_position(newPos)
			timer.delay(0.5, false, function ()
				go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, otherPos.y - 40, go.EASING_LINEAR, 2)
				go.animate("/lvlEnd","position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_OUTBOUNCE, 5, 0, function () self.enderfix = true end)
				timer.delay(1.5, false, function ()
					go.animate("/text1","position.y", go.PLAYBACK_ONCE_FORWARD, 221, go.EASING_OUTBOUNCE, 4, 0, function () self.enderfix = true end)
					go.animate("/text2","position.y", go.PLAYBACK_ONCE_FORWARD, 56, go.EASING_OUTBOUNCE, 3.5, 0, function () self.enderfix = true end)
					go.animate("/text3","position.y", go.PLAYBACK_ONCE_FORWARD, 56, go.EASING_OUTBOUNCE, 3, 0, function () self.enderfix = true end)
					go.animate("/text4","position.y", go.PLAYBACK_ONCE_FORWARD, -97, go.EASING_OUTBOUNCE, 2.5, 0, function () self.enderfix = true end)
					go.animate("/text5","position.y", go.PLAYBACK_ONCE_FORWARD, -239, go.EASING_OUTBOUNCE, 2, 0, function () self.enderfix = true end)
				end)
			end)
			-- Pipe -----------------------------------------------------

		elseif message.other_group == lib.hashed("fail") then
			Fail(self)
			sound.play("/step1#sound1")
			-- Fail -----------------------------------------------------
		elseif message.other_group == lib.hashed("final") then
			go.animate("/final#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 10)
			timer.delay(2, false, function ()
				go.animate("/text", "position.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 10)
			end)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == lib.hashed("action_1") then
		if self.restart then
			self.restart = false
			self.speed = self.startSpeed
			self.canTurnBullet = true
		elseif self.enderfix then
			msg.post("loader:/main#loader", "end_lvl")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
