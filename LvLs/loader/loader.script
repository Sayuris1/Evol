local lib = require "modules.lib"

function init(self)
	msg.post("/lvl1", "acquire_input_focus")

	self.lvl = 1
	self.url = msg.url(nil, "/lvl" .. self.lvl, "collectionproxy")
	msg.post( self.url , "load")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == lib.hashed("proxy_loaded") then
        msg.post(sender, "init")
		msg.post(sender, "enable")
	elseif message_id == lib.hashed ("end_lvl") then
		msg.post(self.url, "disable")
        msg.post(self.url, "final")
		msg.post(self.url, "unload")
		self.lvl = self.lvl + 1
	elseif message_id == hash("proxy_unloaded") then
		self.url = msg.url(nil, "/lvl" .. self.lvl, "collectionproxy")
		msg.post(self.url.path, "acquire_input_focus")
		msg.post( self.url , "load")
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
